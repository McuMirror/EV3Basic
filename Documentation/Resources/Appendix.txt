
<H1 class="chapter">Appendix - Sensors</H1>

<PRE>
Type  Mode  Name            get reading with   delivers 

1        0  NXT-TOUCH       ReadPercent        0=not pressed,  100=pressed  

4        0  NXT-COL-REF     ReadPercent        0=no reflective light, 100=maximum reflective light
4        1  NXT-COL-AMB     ReadPercent        0=no ambient light, 100=maximum ambient light
4        2  NXT-COL-COL     ReadRawValue       1=black, 2=blue, 3=green, 4=yellow, 5=red, 6=white

5        0  NXT-US-CM       ReadRawValue       distance in cm

16       0  TOUCH           ReadPercent        0=not pressed,  100=pressed  

29       0  COL-REFLECT     ReadPercent        0=no reflected light, 100=maximum reflected light
29       1  COL-AMBIENT     ReadPercent        0=no ambient light, 100=maximum ambient light
29       2  COL-COLOR       ReadRawValue       0=unknown, 1=black, 2=blue, 3=green, 4=yellow, 5=red, 6=white, 7=brown
29       4  RGB-RAW         ReadRaw (3 values) value0=red intensity, value1=green intensity, value2=blue intensity

30       0  US-DIST-CM      ReadRawValue       distance in mm
30       1  US-DIST-IN      ReadRawValue       distance in tenth of an inch

32       0  GYRO-ANG        ReadRawValue       angle in degrees
32       1  GYRO-RATE       ReadRawValue       rate of change of angle in deg/s

33       0  IR-PROX         ReadPercent        distance in cm (not very accurate)
33       1  IR-SEEK         ReadRaw (2 values) value0=direction and value1=distance to IR beacon
33       2  IR-REMOTE       ReadRaw (4 values) value0=signal from channel 1 (*), value1=signal from channel 2...
                                    a remote control sender can be switched to use one of 4 channels 
                                    (slider on top position is channel 1) and the remote receiver can detect 
                                    all channel signals at the same time
                                               											       
(*) numbers for the remote control buttons (A=left top, B=left bottom, C=right top, D=right bottom, E=beacon activated):
	A = 1    A & B = 10   B & C = 7
	B = 2    A & C = 5    B & D = 8
	C = 3    A & D = 6    C & D = 11
	D = 4                 E = 9
   other combinations give a reading of 0
</PRE>   

<H1 class="chapter">Appendix - I2C Tutorial</H1>
<H3 class="subchapter">Why access I2C directly?</H3>
<P>
Normally interfacing to sensors from the EV3 brick is done using the easy-to-use Sensor.Read... commands. 
But some third-party devices are not compatible with the default sensor protocol and require extra programming. 
The vendors of such devices normally provide some programming blocks for the original graphics programming 
environment that handle all the details of the communication. 
</P>
<P>
For EV3Basic there is probably no such support available, but normally there is some documentation specifying 
the low-level communication protocol. Having this information, the Sensor.CommunicateI2C or one of the other
I2C related commands can be used to implement any such protocol.
</P>
<H3 class="subchapter">Introduction to I2C</H3>
<P>
I2C is a communication facility that allows a single master to access multiple slaves on a common bus
for reading and writing data. In the case of the EV3 each sensor port with its attached sensor device(s)
can form such a bus. 
</P>
<P>
The communication is done by the master sending a bunch of data bytes to a slave or by requesting
a bunch of data bytes. The slaves themselves cannot initiate any data transfer. Because there can be multiple 
slaves connected to the bus, the master needs to make clear to which slave it wants to talk. This is done by 
sending a slave address (a number from 0 to 127) before communication. The designer of the system must 
make sure that no two slaves on a bus have the same address to avoid conflict.
</P>
<P>
The I2C protocol itself only provides a means for communication, the meaning of the data totally depends on the devices in question. 
</P>
<H3 class="subchapter">CommunicateI2C</H3>
<P>
This command of EV3Basic is the only way to access the I2C functionality directly in a raw form.
It combines the operation of sending an arbitrary number of bytes and receiving some bytes back. 
Example:
</P>
<pre>
W[0]=60
W[1]=70
W[2]=80
R=Sensor.CommunicateI2C(1,44,3,4,W)
</pre>
<P>
This will first send the bytes 60,70,80 to the slave with address 44 that is connected to sensor port 1.
Then it will fetch 4 bytes from the same slave. The received bytes are stored in the array R.
</P>
<H3 class="subchapter">I2C Registers</H3>
<p>
The concept of registers is basically not part of the I2C protocol, but this concept is used
so widely, that it is now a kind of standard way to do communication with many devices.
On devices that use registers, all data transfer is done by the master writing 
into the slave's registers or reading data from the registers. A register is basically just 
a storage location that can hold one byte of data and is accessed via its register number
(or register 'address' - but using this name will probably lead to confusion because the slaves
themselves already have an I2C-address).
</p>
<P>
Since version 1.2.5, EV3Basic directly provides support for reading/writing 
from/to registers of I2C devices that follow the register standard.
</P>
<H3 class="subchapter">Sources of confusion</H3>
<P>
Slave address vs. Register address.<br>
Many device documents refer to the slave address and the register number both just as 'address'.
Make sure to understand the difference and what the documentation really means in each case.
</P>
<P>
Slave address is pre-multiplied by 2<br>
The inner working of the protocol combines the 7 bits of the slave address (values from 0 to 127) with
a single bit that specifies the direction (read or write) to give 8 bits that need to be transmitted from master to slave.
Sometimes the developers of a device just write this combined value into the program to save a few processor cycles
during execution. When this value finds is way into the documentation, a slave address of for example 80 will 
be written 160 there. It is sometimes quite hard to figure out what the real address is. If in doubt, you need to 
write a test program to check if a slave address is valid.
</P>

<H1 class="chapter">Appendix - Advanced logic operations</H1>
<H3 class="subchapter">Motivation</H3>
<P>
In Small Basic (and indeed in any dialect of Basic, I have encountered) the use of comparators and of the 
logic operators AND and OR is limited to the context of If and While. But sometimes it is necessary 
to keep the outcome of a comparison for future use. For this you have to write something like
</P>
<pre>
If X<10 OR X>50 Then
   A = "True"
Else
   A = "False"
EndIf
</pre>
<P>
But knowing other programming languages you would probably very much prefer to write this in a single line
like
</P>
<pre>
A = X<10 OR X>50
</pre>
<P>
which is not possible in Small Basic. 
</P>
<P>
But using the Byte.ToLogic command, there is a funky way to indeed do the same thing also in one line. 
Please read on.
</P>
<H3 class="subchapter">Comparators outside If and While</H3>
<P>
When reading the specification for the Byte.ToLogic commands carefully you can see that it will 
return "True" for positive input values and "False" for 0 or negative. 
So consider the following construct.
</P>
<pre>
A = Byte.ToLogic(X-Y)
</pre>
<P>
This will actually set A to "True" whenever X is greater than Y just like a non-existent 
greater-than comparison expression would. Similarly the construct 
</P>
<pre>
A = Byte.ToLogic(Math.Abs(X-Y))
</pre>
<P>
is equivalent to a non-equal operator. Using this idea you can create all possible comparison
expressions of Small Basic (some are quite simple to write, others are more complicated)
<pre>
  X > Y              Byte.ToLogic(X-Y)
  X < Y              Byte.ToLogic(Y-X)
  X >= Y             Byte.ToLogic(1+Math.Floor(X-Y))
  Y <= X             Byte.ToLogic(1+Math.Floor(Y-X))
  X &lt;&gt; Y             Byte.ToLogic(Math.Abs(X-Y))
  X = Y              Byte.ToLogic(1-Math.Ceiling(Math.Abs(X-Y)))
</pre>
<H3 class="subchapter">Putting comparators together</H3>
<P>
To allow a logic combination of comparators (just like the motivating example), you can
actually use the Math.Max and Math.Min commands to do proper AND and OR of the comparator outcomes.
Consider the following example:
</P>
<pre>
A = Byte.ToLogic(Math.Max(10-X,X-50))
</pre>
<P>
The first parameter of the Max will be greater than zero whenever X is lower than 10. 
The second parameter of the Max will be greater than zero whenever X is higher than 50.
The outcome of the Max command will be greater than zero whenever one of its parameters is greater than zero.
By turning this "greater-than-zero" property into an explicit logic value of "True" or "False"  
with the Byte.ToLogic command, this is now totally equivalent to the non-existing construct:
</P>
<pre>
A = X<10 OR X>50
</pre>
<P> 
all done in one single line.
Here is a summary of logic operators (including NOT for good measure):
</P>
<pre>
  A AND B                Math.Min(A,B)
  A OR B                 Math.Max(A,B)
  NOT A                  (1-Math.Ceiling(A))
</pre>

