<H1 class="chapter">EV3Basic</H1>
<P>
Programming a robot to do your bidding is great fun. The easiest way to program the Lego EV3 brick for simple tasks is to use the 
graphical programming environment provided by Lego. 
But for larger and more complex programs, this no longer works and you need some text-based programming language to write programs.
There are already many different projects that have created programming environments for the EV3 to provide exactly this (LeJOS, MonoBrick, RobotC, ev3dev, and many more).
But they all have one thing in common: They are awfully complicated to set up and use, and you probably need years of computer experience to get any of them working.
</P>
<P>
To fill the gap between 'easy to use but limited' and 'powerful but complicated', I have invented EV3Basic. It is targeted mainly at users that want to go beyond
the limitations of graphical programming, but who are no IT-professionals themselves. 
EV3Basic is quite easy to learn and still offers all the functionality you need to create awesome programs. Learning to program on the way is probably an added benefit.
</P>
<P>
EV3Basic is based on the programming language "Small Basic" which was developed by Microsoft to provide an entrance into programming especially for children, 
but also for all interested persons new to this topic. "Small Basic" is intentionally designed for ease of use, and for my EV3-extension I tried to do the same.
I would be very happy if this language could indeed be of some use to help people learn programming and use the EV3 brick more creatively.
</P>
<address>
Reinhard Grafl
<br>
reinhard.grafl@aon.at
</address>

<H1 class="chapter">Getting Started</H1>
<P>
First thing you need is a PC running Microsoft Windows (any version up from Windows Vista) and the current version of
<a href="http://smallbasic.com">Microsoft Small Basic</a> which can be downloaded for free. If you are completely new to programming, 
you probably need to learn the principles first. This does not take too long and is quite fun in itself. There are some very good tutorials
on the Small Basic website to help you with this.
</P>
<P>
Next step is to download and install the EV3-extension for Small Basic to actually be able to control the EV3 brick with your program. 
From the <a href="https://github.com/c0pperdragon/EV3Basic/releases">newest release of EV3Basic</a>, download and install the file "EV3BasicInstaller.msi".
This should install the extension right into the installation directory of Small Basic. If you have previously chosen a non-standard location for Small Basic, 
use this same location here.
At the next start of Small Basic (restart it if it was still running), you have access to various objects to control different aspects of the brick
and some additional multi-purpose objects as well.
Now create your very first EV3-program by writing 
</P>
<pre>
   LCD.Clear()
   LCD.Write(40,40, "Hello EV3")
   Program.Delay(10000)
</pre>
<P>
into the program window. 
Then connect the EV3 brick to your computer using the USB cable, start it up, and when it is running, 
press the big blue "Run" button of Small Basic. This will compile and start the program that remote-controls the brick from the PC.
</P>
<P>
When writing your own programs, the Intellisense - system of Small Basic will show you the possible library functions and usage
documentation which contains the same information that is also available in this document in the chapter "Library Documentation".
Many more examples for programming the EV3 are also available on the releases page (probably named 'examples.zip'). 
</P>
<P>
Remote controlling the brick with a program on the PC is a cool thing, but for many uses you will need an independent robot that 
has its own program and does not need the PC to tell it every single step.
</P>
<P>
To get the program to the brick, you need the EV3Explorer which was already installed along with the EV3-extension and is available on the 
windows start menu (EV3Basic/EV3Explorer). Starting this program will open a window where you can see the files that are stored on the EV3 brick 
(on the left side of the window) and also the files stored on your PC (on the right side of the window).
You can compile any of the examples and your own programs by selecting the source code
file (ends with .sb) and click "Compile and Run". 
This compiles the source code file to a file that can be executed by the brick (having the file extension .rbf), uploads it to the brick
and immediately starts it. 
If you want to start your programs from the menu on the brick, you need to create a subfolder of the "prjs"-folder with a name of your
choice and use this as a target folder for compilation. (The EV3 will only show programs in its menu that are properly placed in their own folder).
</P>

<H1 class="chapter">Quick reference of Small Basic</H1>
<p>
For persons who already know how to program with some other languages and do not want to go through the complete Small Basic tutorials, 
here is a short example that contains most language constructs and a short explanation of each.
This example will not run on the EV3 brick, because it uses the Small Basic text window.
</p>
<pre>

  ' Demo program explaining most of Small Basic
  ' (all comments start with single quotation mark)

  ' Execution starts here
  A = 5       ' variables are implicitly declared at first use 
  a = a + 1   ' everything is case-insensitive
  B[a] = 55   ' arrays are implicitly defined and grow as needed
  X = "hi"    ' variables can also hold text

  Sub write   ' defines a sub-program with this name (no parameters possible)
	TextWindow.WriteLine(X)           ' call library function, access variable defined elsewhere
  EndSub
     ' control flow of the main program runs around the Sub - definitions

  TextWindow.WriteLine("A="+a)        ' string concatenation with +
  WRITE()                             ' call subprogram. name is also case-insensitive
  write2()                            ' may call subprogram that is defined further down the code

  TextWindow.Writeline("B[6]="+B[6])  ' access to arrays'
  
  For i=2 to 5 		               	  ' a loop from 2 to 5 (inclusively)
	TextWindow.Writeline("I:"+I)
  EndFor
  For i=6.5 to 10.5 step 2         	  ' a loop with fractional values and larger step
	TextWindow.Writeline("I:"+I)
  EndFor

  Sub write2
	write()          ' subprogram can call other subprograms
	write()
  EndSub
     ' control flow of the main program runs around the Sub - definitions

   I=99				' case insensitive - overwrites previous i
   while i>3        ' loop with condition
     i=i/2
     TextWindow.Writeline("I:"+i)
   endwhile
   TextWindow.WriteLine("PI="+Math.PI)         ' a library property (access without parentheses)
   TextWindow.WriteLine("SIN="+Math.Sin(0.5))  ' library function returning value

   A=50
   B=20
   If a<5 then				       ' an IF-construct with multiple conditions
		TextWindow.WriteLine("first")
   elseif a<10 and b<100 then                ' logic 'and' of conditions
		TextWindow.WriteLine("second")
   elseif a<20 or (b>40 and b<60) then       ' logic 'or' and nested conditions
		TextWindow.WriteLine("third")
   else
		TextWindow.WriteLine("other")
   endif
</pre>


<H1 class="chapter">Differences between Small Basic and EV3Basic</H1>
<P>
While I have tried to mimic the original behaviour of Small Basic in my EV3-compiler as exactly as possible, 
there are some things that simply cannot be done with the EV3 byte code interpreter.
</P>

<H3 class="subchapter">Variables are typed</H3>
<P>  
While Small Basic has just one datatype which is a unicode string into which all possible values (even arrays) are mangled, 
EV3Basic has 4 distinct datatypes for variables:
</P>
<ul>
<li>Number  (a 32bit floating point)</li>
<li>Text    </li>
<li>Array of Numbers</li>
<li>Array of Texts</li>
</ul>
<P>
Every variable has one of these types (which is determined by its first use in the program code) 
and cannot be used to store anything else.
</P>

<H3 class="subchapter">Operators and functions work on compile-type types</H3>
<P>
Arithmetic or logic operators need to be provided with either number or text parameters and deliver a result of also a defined type
(for example, the "<" needs two numbers and delivers a text).
One exception is the "=" which will perform either a numerical or a textual comparison, 
depending on the compile-time type of the operands. Another exception is the "+" that will do a 
numerical add when provided with two numbers, but will do a text concatenation if one of the operands is text.
Similar requirements are there for function parameters, which also have a defined compile-time type. 
To make things easier, an automatic conversion from number to text is done if a parameter needs a text (but not the other way round).
</P>

<H3 class="subchapter">Arrays</H3>
<P>
In Small Basic, arrays work like a dictionary and can use any text as an index. 
EV3Basic can't do that. Only numbers are allowed as index and only non-negative numbers without decimal places work as expected
 (A[4.5] is the same as A[4], A[-4] will always deliver 0 or "")
There is no support for multi-dimensional arrays. 
While arrays can be passed to library functions and out again, no temporary arrays are created to receive the result. For all functions that return an array,
this return value must be immediately stored in an array variable.
</P>

<H3 class="subchapter">Limitation for text</H3>
<P>
Any text variable can only hold up to 251 characters and not the full unicode range is supported, 
but only the codes 1 - 255  (they are just plain C-style char strings).
The same holds for all elements of text arrays.
</P>

<H1 class="chapter">Bluetooth Support</H1>
<P>
Connecting the EV3 to your PC directly with an USB cable is the most easy and reliable
way to use it with EV3Basic. Nevertheless, having to use the cable can be quite cumbersome
in many circumstances, especially when developing mobile robots.
</P>
<P>
When you have a working bluetooth faciliy on your PC (either with a bluetooth dongle or built-in),
you can configure the EV3 to communicate with the PC wirelessly. If not already done, you have 
to "pair" the EV3 with your PC to allow communication. To do so, first activate the bluetooth
features on the EV3: In the settings menu, activate the "Visibility" and "Bluetooth" options.
Then on the PC, open the system dialog "Bluetooth Devices". There you can search for the device 
and start to establish a connection to the EV3. The process may be a bit lengthy and requires to
 confirm the action on the
EV3 as well as on the PC, and you will even have to enter the correct coupling code in some place 
(should be "1234"). 
</P>
<P>
Once the connection is set up and the automatic installation of the appropriate drivers is 
finished, your PC can communicate with the EV3 over a so-called "Serial Port". Which will
be named "COM1", "COM3" or the like. You can check which name was actually assigned by looking
at the properties page of the EV3 bluetooth device. 
</P>
<P>
To use the newly established connection with EV3Basic, just start your program from
Small Basic or just start the EV3-Explorer. When no EV3 can be found directly connected via USB, 
but there are possible "Serial Ports" available, the PC will prompt you to select one of
these ports. When this is indeed the port for the EV3, the connection will work.
</P>

<H1 class="chapter">WiFi Support</H1>
<P>
Like a Bluetooth connection, a WiFi connection allows you to connect to your model without using 
a cable. WiFi has some advantages over Bluetooth concerning range, speed and reliability, 
but also comes with some drawbacks like higher power consumption and the need to add a WiFi dongle to the EV3. 
And this setup only works when you have a WiFi router available. It is basically a matter of taste
if you prefer bluetooth or WiFi, or maybe a matter of technical issues with one of the possibilities.
</P>
<P>
To use the WiFi option, you need a specific WiFi dongle that is compatible with the EV3 brick. Currently there
is only one model available that works with an unmodified EV3: "Netgear WNA1100" which must be inserted
into the large USB connector at the left side of the EV3.
Setting up the WiFi connection can be done from the settings menu on the brick. You have to activate the 
WiFi option (this takes some time to start up the dongle) and then you have to establish a connection to 
the WiFi router. If you have set up encryption for your WiFi network, you need to enter the WPA2-key
directly on the brick. Currently no other WiFi-encryption methods are supported.
</P>
<P>
Once you have successfully established a connection between the EV3 and your router, the EV3 should have
received an IP address, which would look something like "10.2.3.4". You can check which address was 
assigned to your EV3 in the "Brick Info" section of the settings menu. It is at the very bottom of the list.
</P>
<P>
When you want to finally connect to the EV3 from a Small Basic program or with the EV3-Explorer,
use the "WiFi" button in the dialog box that asks which connection to use. Then enter the IP address exactly as it
was shown on the brick. You only have to enter the address once. For future uses, it will already appear in
the selection list.
</P>
<P>
Note that the brick does not automatically connect to the WiFi router when starting up. You always have to 
activate the connection after each power-up.
</P>

<H1 class="chapter">Motor object overview</H1>
<P>
The commands to control the motors can be organized into a functional matrix, with the "Steer"-variants available since EV3Basic 1.2.5: 
</P>
<TABLE>
<TR><TD></TD><TD>Move x degrees while waiting</TD><TD>Start to run indefinitely</TD><TD>Start to move x degrees</TD></TR>
<TR><TD>Regulate speed</TD><TD>Motor.Move</TD><TD>Motor.Start</TD><TD>Motor.Schedule</TD></TR>
<TR><TD>Choose power</TD><TD>Motor.MovePower</TD><TD>Motor.StartPower</TD><TD>Motor.SchedulePower</TD></TR>
<TR><TD>Steering</TD><TD>Motor.MoveSteer</TD><TD>Motor.StartSteer</TD><TD>Motor.ScheduleSteer</TD></TR>
<TR><TD>Synchronize</TD><TD>Motor.MoveSync</TD><TD>Motor.StartSync</TD><TD>Motor.ScheduleSync</TD></TR>
</TABLE>
<P>
For most purposes the variants with speed regulation of a single motor will be the right choice. So these commands have
shorter names (no "Power", "Steer" or "Sync" suffix) when compared to their unregulated or synchronized counterparts. 
</P>
<P>
When you have to change power or speed of an already running motor, just re-issue a start command with the appropriate
speed or power value. The motor will then seamlessly switch over to the new mode of operation.
</P>

<H1 class="chapter">Library Documentation</H1>
<P>
The runtime-library for the EV3 is organized in individual parts, called 'objects'. Each object provides functionality for a different part of the system. 
This list contains everything that is available for both Small Basic on the PC (with EV3-extension) and also on the brick when compiling with EV3Explorer.
When developing programs that only need to run on the PC, you can also use everything else that is provided by Small Basic, but I have not documented it here.
</P>
